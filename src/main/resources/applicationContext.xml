<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 开启DI注解解析器 -->
    <context:annotation-config/>
    <!-- 开启IOC注解解析器,扫描包 比如@Service-->
    <context:component-scan base-package="com.thinkingcao.silence.ssm.service"/>
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!-- 1.加载 db.properties 配置文件 -->
   <!-- <context:property-placeholder location="classpath:*.properties" system-properties-mode="NEVER"/>-->

    <!--引入外部配置文件 由于后期可能会引入多个配置文件 所以采用list的形式 -->
    <bean id="propertyPlaceholder"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
                <value>classpath:silence.properties</value>
            </list>
        </property>
    </bean>

    <!-- 2.创建 DataSource 对象，配置数据源属性连接 -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 3.创建 SqlSessionFactory对象 -->
    <bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--关联 dataSource 对象 -->
        <property name="dataSource" ref="myDataSource"/>
        <!--加载 MyBatis 全局配置文件 -->
        <property name="configLocation" value="classpath:MyBatis-config.xml"/>
        <!--为哪些包下的类起别名 -->
        <property name="typeAliasesPackage" value="com.thinkingcao.silence.ssm.entity"/>
        <!--加载 Mapper 映射配置文件 -->
        <property name="mapperLocations" value="classpath:mappers/*Mapper.xml"/>
    </bean>

    <!-- 创建 Mapper接口的代理对象 -->
    <!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!-- 关联 sqlSessionFactory -->
    <!--<property name="sqlSessionFactory" ref="mySqlSessionFactory"/>-->
    <!-- 根据哪一个接口创建代理对象 -->
    <!--<property name="mapperInterface" value="com.thinkingcao.silence.ssm.mapper.UserMapper"/>-->
    <!--</bean>-->

    <!-- 创建 service 对象 -->
    <!--<bean id="userService" class="com.thinkingcao.silence.ssm.service.impl.UserServiceImpl">-->
    <!--<property name="userMapper" ref="userMapper"/>-->
    <!--</bean>-->

    <!-- 4. 创建 Mapper 接口扫描器 配置mapper接口扫描包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描哪些包,并为该包下的接口创建代理对象 -->
        <property name="basePackage" value="com.thinkingcao.silence.ssm.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory"></property>
    </bean>


    <!-- 5.事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="myDataSource"/>
    </bean>


</beans>